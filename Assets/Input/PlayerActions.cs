//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Input/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""CarMovement"",
            ""id"": ""40df2026-2298-47cb-96b0-2c41386d89cc"",
            ""actions"": [
                {
                    ""name"": ""Gas"",
                    ""type"": ""Value"",
                    ""id"": ""b34fdc4d-fe6f-4703-8bdc-609dfa89d77b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Directions"",
                    ""type"": ""Value"",
                    ""id"": ""705c8ee1-c4d9-4681-a52d-b27857818769"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""64e88e1f-6bfb-423b-916d-6bc77ddd42d3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gas"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""9b98679b-36e2-4351-83d7-56152bac0a37"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Directions"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""037d23dd-5a18-492d-9e9a-0c7a28c78349"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Directions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8c41ec93-fdb2-43ca-8237-6515056af45f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Directions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CarMovement
        m_CarMovement = asset.FindActionMap("CarMovement", throwIfNotFound: true);
        m_CarMovement_Gas = m_CarMovement.FindAction("Gas", throwIfNotFound: true);
        m_CarMovement_Directions = m_CarMovement.FindAction("Directions", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CarMovement
    private readonly InputActionMap m_CarMovement;
    private List<ICarMovementActions> m_CarMovementActionsCallbackInterfaces = new List<ICarMovementActions>();
    private readonly InputAction m_CarMovement_Gas;
    private readonly InputAction m_CarMovement_Directions;
    public struct CarMovementActions
    {
        private @PlayerActions m_Wrapper;
        public CarMovementActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Gas => m_Wrapper.m_CarMovement_Gas;
        public InputAction @Directions => m_Wrapper.m_CarMovement_Directions;
        public InputActionMap Get() { return m_Wrapper.m_CarMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CarMovementActions set) { return set.Get(); }
        public void AddCallbacks(ICarMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_CarMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CarMovementActionsCallbackInterfaces.Add(instance);
            @Gas.started += instance.OnGas;
            @Gas.performed += instance.OnGas;
            @Gas.canceled += instance.OnGas;
            @Directions.started += instance.OnDirections;
            @Directions.performed += instance.OnDirections;
            @Directions.canceled += instance.OnDirections;
        }

        private void UnregisterCallbacks(ICarMovementActions instance)
        {
            @Gas.started -= instance.OnGas;
            @Gas.performed -= instance.OnGas;
            @Gas.canceled -= instance.OnGas;
            @Directions.started -= instance.OnDirections;
            @Directions.performed -= instance.OnDirections;
            @Directions.canceled -= instance.OnDirections;
        }

        public void RemoveCallbacks(ICarMovementActions instance)
        {
            if (m_Wrapper.m_CarMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICarMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_CarMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CarMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CarMovementActions @CarMovement => new CarMovementActions(this);
    public interface ICarMovementActions
    {
        void OnGas(InputAction.CallbackContext context);
        void OnDirections(InputAction.CallbackContext context);
    }
}
